name: "Build, Push and Deploy a container image to Kubernetes"
# Requires `csproj` file contains `<EnableSdkContainerSupport>true</EnableSdkContainerSupport>` tag and a deployment folder to be present in the repository.

on:
  workflow_call:
    secrets:
      TRAKX_GITHUB_TOKEN:
        description: "Access token provided by the calling action context, used to publish the packages and push the corresponding tag."
        required: false
      TRAKX_BOT_READONLY_PAT:
        description: "Personal access token used to access the github private nuget source."
        required: true
    inputs:
      projectFolder:
        description: "Folder containing the project to build."
        required: true
        type: string
      serviceName:
        description: "Name of service being deployed."
        required: true
        type: string
      imageName:
        description: "Name of the docker image to build. If not provided, will be the same as 'serviceName'."
        required: false
        type: string
      runnerName:
        description: "Name of the runner to use. If not provided, will be generated based on the branch name."
        required: false
        type: string
        default: ''
      environment:
        description: "Environment to deploy to (dev | staging | production). If not provided, will be generated based on the branch name."
        required: false
        type: string
        default: ''
      containerPublishType:
        description: "Type of container publish (api | worker). Default is api."
        required: false
        type: string
        default: 'api'
      imageTagPrefix:
        description: "Prefix of the docker image tag. If not provided, will be generated based on the environment."
        required: false
        type: string
        default: ''
      dotnetVersion:
        description: "Version of dotnet to use. Default is v7.x."
        required: false
        type: string
        default: "7.x"
      dockerRegistry:
        description: "Docker registry to push the image to. Default is docker.pkg.github.com."
        required: false
        type: string
        default: "docker.pkg.github.com"
      actionsRepoRef:
        description: "Run actions from this ref. Default is master."
        type: string
        required: false
        default: "master"

env:
  IMAGE_NAME: ${{ inputs.imageName || inputs.serviceName }}
  GITHUB_TOKEN: ${{ secrets.TRAKX_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}

jobs:
  prepare:
    name: "Prepare the environment to run the jobs"
    runs-on: ubuntu-latest
    outputs:
      runnerName: ${{ steps.pick-runner.outputs.runnerName }}
      environment: ${{ steps.pick-environment.outputs.environment }}
    steps:
      - name: Checkout calling repo
        uses: actions/checkout@v3

      - name: Checkout trakx/github-actions repo
        uses: actions/checkout@v3
        with:
          repository: trakx/github-actions
          path: ./github-actions
          ref: ${{ inputs.actionsRepoRef }}

      - name: Pick environment
        id: pick-environment
        uses: ./github-actions/pick-environment
        with:
          environment: ${{ inputs.environment }}

      - name: Pick runner
        id: pick-runner
        uses: ./github-actions/pick-runner
        with:
          runnerName: ${{ inputs.runnerName }}

  validate-event:
    name: "Block manual releases to staging and production"
    needs: [ prepare ]
    runs-on: ubuntu-latest
    steps:
      - name: Block workflow_dispatch for staging and production
        shell: bash
        run: |
          if [[ "${{ needs.prepare.outputs.environment }}" == "production" || "${{ needs.prepare.outputs.environment }}" == "staging" ]]; then
            if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
              echo "Event workflow_dispatch is not allowed for environment ${{ needs.prepare.outputs.environment }}."
              exit 1
            fi
          fi

  build-push-container-image:
    name: "Build and push container image"
    needs: [ prepare, validate-event ]
    runs-on: ${{ needs.prepare.outputs.runnerName }}
    steps:
      - name: Checkout calling repo
        uses: actions/checkout@v3

      - name: Checkout trakx/github-actions repo
        uses: actions/checkout@v3
        with:
          repository: trakx/github-actions
          path: ./github-actions
          ref: ${{ inputs.actionsRepoRef }}

      - name: Get last commit of calling repo
        id: last-commit-sha
        uses: ./github-actions/get-last-commit

      - name: Set variable CONTAINER_IMAGE_TAG_PREFIX
        shell: bash
        run: |
          IMAGE_TAG="${{ inputs.imageTagPrefix }}"
          if [[ -z "$IMAGE_TAG" ]]; then
            if [[ "${{ needs.prepare.outputs.environment }}" == "production" ]]; then
                IMAGE_TAG="prod"
            elif [[ "${{ needs.prepare.outputs.environment }}" == "staging" ]]; then
                IMAGE_TAG="stage"
            else
                IMAGE_TAG="dev"
            fi
          fi
          echo "Tagging image prefix with: $IMAGE_TAG"
          echo "CONTAINER_IMAGE_TAG_PREFIX=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Build and push container image
        id: build-push-container-image-step
        uses: ./github-actions/build-push-container-image
        with:
          githubToken: ${{ env.GITHUB_TOKEN }}
          packageReadonlyPat: ${{ secrets.TRAKX_BOT_READONLY_PAT }}
          projectFolder: ${{ inputs.projectFolder }}
          imageName: ${{ env.IMAGE_NAME }}
          imageTagPrefix: ${{ env.CONTAINER_IMAGE_TAG_PREFIX }}
          containerPublishType: ${{ inputs.containerPublishType }}
          dotnetVersion: ${{ inputs.dotnetVersion }}
          dockerRegistry: ${{ inputs.dockerRegistry }}
          imageTagSuffix: ${{ steps.last-commit-sha.outputs.lastCommitSha }}
          doCheckout: false
    outputs:
      tag: ${{ steps.build-push-container-image-step.outputs.tag }}

  deploy-kubernetes:
    name: "Deploy image to Kubernetes"
    needs: [ prepare, build-push-container-image ]
    runs-on: ${{ needs.prepare.outputs.runnerName }}
    if: |
      always() &&
        (needs.build-push-container-image.result == 'success' || (needs.build-push-container-image.result == 'skipped'
            && github.event_name == 'workflow_run'
            && github.event.workflow_run.conclusion == 'success' ))
    steps:
      - name: Checkout calling repo
        uses: actions/checkout@v3

      - name: Checkout trakx/github-actions repo
        uses: actions/checkout@v3
        with:
          repository: trakx/github-actions
          path: ./github-actions
          ref: ${{ inputs.actionsRepoRef }}

      - name: Deploy container image to Kubernetes
        id: deploy-container-k8s
        uses: ./github-actions/deploy
        with:
          githubToken: ${{ env.GITHUB_TOKEN }}
          environment: ${{ needs.prepare.outputs.environment }}
          tag: ${{ needs.build-push-container-image.outputs.tag }}
          service: ${{ inputs.serviceName }}
          artifact-name: ${{ env.IMAGE_NAME }}
          serviceRegistry: ${{ inputs.dockerRegistry }}
          type: "kubernetes"
          actionsRepoRef: ${{ inputs.actionsRepoRef }}
