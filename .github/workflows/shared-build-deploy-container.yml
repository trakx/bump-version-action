name: "Build, Push and Deploy a container image to Kubernetes"
# Requires `csproj` file contains `<EnableSdkContainerSupport>true</EnableSdkContainerSupport>` tag and a deployment folder to be present in the repository.

on:
  workflow_call:
    secrets:
      TRAKX_GITHUB_TOKEN:
        description: "Access token provided by the calling action context, used to publish the packages and push the corresponding tag."
        required: false
      TRAKX_BOT_READONLY_PAT:
        description: "Personal access token used to access the github private nuget source."
        required: true
    inputs:
      projectFolder:
        description: "Folder containing the project to build."
        required: true
        type: string
      serviceName:
        description: "Name of service being deployed."
        required: true
        type: string
      imageName:
        description: "Name of the docker image to build. If not provided, will be the same as 'serviceName'."
        required: false
        type: string
      runnerName:
        description: "Name of the runner to use. If not provided, will be generated based on the branch name."
        required: false
        type: string
        default: ''
      containerPublishType:
        description: "Type of container publish (api | worker). Default is api."
        required: false
        type: string
        default: 'api'
      dotnetVersion:
        description: "Version of dotnet to use. Default is v7.x."
        required: false
        type: string
        default: "7.x"
      dockerRegistry:
        description: "Docker registry to push the image to. Default is docker.pkg.github.com."
        required: false
        type: string
        default: "docker.pkg.github.com"
      actionsRepoRef:
        description: "Run actions from this ref. Default is master."
        type: string
        required: false
        default: "master"

env:
  IMAGE_NAME: ${{ inputs.imageName || inputs.serviceName }}
  GITHUB_TOKEN: ${{ secrets.TRAKX_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}

jobs:
  prepare-and-validate:
    name: "Prepare the environment to run the jobs"
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.pick-environment-setup.outputs.environment }}
      runnerName: ${{ steps.pick-runner.outputs.runnerName }}
      tagPrefix: ${{ steps.pick-environment-setup.outputs.tagPrefix }}
    steps:
      - name: Checkout calling repo
        uses: actions/checkout@v3

      - name: Checkout trakx/github-actions repo
        uses: actions/checkout@v3
        with:
          repository: trakx/github-actions
          path: ./github-actions-shared-build-deploy-container
          ref: ${{ inputs.actionsRepoRef }}

      - name: Pick environment and runner
        id: pick-environment-setup
        uses: ./github-actions-shared-build-deploy-container/pick-environment-setup

      - name: Pick runner
        id: pick-runner
        shell: bash
        run: |
          RUNNER_NAME="${{ inputs.runnerName }}"
          if [[ -z "$RUNNER_NAME" ]]; then
            RUNNER_NAME="${{ steps.pick-environment-setup.outputs.runnerName }}"
          fi
          echo "Picked runner for the workflow: $RUNNER_NAME"
          echo "runnerName=$RUNNER_NAME" >> $GITHUB_OUTPUT

      - name: Block workflow_dispatch for staging and production
        shell: bash
        run: |
          if [[ "${{ steps.pick-environment-setup.outputs.environment }}" == "production" || "${{ steps.pick-environment-setup.outputs.environment }}" == "staging" ]]; then
            if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
              echo "Event workflow_dispatch is not allowed for environment ${{ steps.pick-environment-setup.outputs.environment }}."
              exit 1
            fi
          fi

  build-push-container-image:
    name: "Build and push container image"
    needs: [ prepare-and-validate ]
    runs-on: ${{ jobs.prepare-and-validate.outputs.runnerName }}
    steps:
      - name: Checkout calling repo
        uses: actions/checkout@v3

      - name: Checkout trakx/github-actions repo
        uses: actions/checkout@v3
        with:
          repository: trakx/github-actions
          path: ./github-actions-shared-build-deploy-container
          ref: ${{ inputs.actionsRepoRef }}

      - name: Get last commit of calling repo
        id: last-commit-sha
        uses: ./github-actions-shared-build-deploy-container/get-last-commit

      - name: Build and push container image
        id: build-push-container-image-step
        uses: ./github-actions-shared-build-deploy-container/build-push-container-image
        with:
          githubToken: ${{ env.GITHUB_TOKEN }}
          packageReadonlyPat: ${{ secrets.TRAKX_BOT_READONLY_PAT }}
          projectFolder: ${{ inputs.projectFolder }}
          imageName: ${{ env.IMAGE_NAME }}
          imageTagPrefix: ${{ jobs.prepare-and-validate.outputs.tagPrefix }}
          containerPublishType: ${{ inputs.containerPublishType }}
          dotnetVersion: ${{ inputs.dotnetVersion }}
          dockerRegistry: ${{ inputs.dockerRegistry }}
          imageTagSuffix: ${{ steps.last-commit-sha.outputs.lastCommitSha }}
          actionsRepoRef: ${{ inputs.actionsRepoRef }}
          doCheckout: false
    outputs:
      tag: ${{ steps.build-push-container-image-step.outputs.tag }}

  deploy-kubernetes:
    name: "Deploy image to Kubernetes"
    needs: [ prepare-and-validate, build-push-container-image ]
    runs-on: ${{ jobs.prepare-and-validate.outputs.runnerName }}
    if: |
      always() &&
        (jobs.build-push-container-image.result == 'success' || (jobs.build-push-container-image.result == 'skipped'
            && github.event_name == 'workflow_run'
            && github.event.workflow_run.conclusion == 'success' ))
    steps:
      - name: Checkout calling repo
        uses: actions/checkout@v3

      - name: Checkout trakx/github-actions repo
        uses: actions/checkout@v3
        with:
          repository: trakx/github-actions
          path: ./github-actions-shared-build-deploy-container
          ref: ${{ inputs.actionsRepoRef }}

      - name: Deploy container image to Kubernetes
        id: deploy-container-k8s
        uses: ./github-actions-shared-build-deploy-container/deploy
        with:
          githubToken: ${{ env.GITHUB_TOKEN }}
          tag: ${{ jobs.build-push-container-image.outputs.tag }}
          service: ${{ inputs.serviceName }}
          artifact-name: ${{ env.IMAGE_NAME }}
          serviceRegistry: ${{ inputs.dockerRegistry }}
          type: "kubernetes"
          actionsRepoRef: ${{ inputs.actionsRepoRef }}
