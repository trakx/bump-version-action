name: Evaluate Git Diff
description: "Evaluates the git diff and outputs the files that have been modified, added or deleted"

inputs:
  paths:
    description: "Paths to be verified, separated by comma"
    required: true
    default: "."

outputs:
  hasChanges:
    description: "Has changes"
    value: ${{ steps.evaluateStep.outputs.hasChanges }}
  pathsWithChanges:
    description: "Paths with changes (split by comma)"
    value: ${{ steps.evaluateStep.outputs.pathsWithChanges }}

runs:
  using: "composite"
  steps:
    - name: "Detect changes from event commits"
      id: files
      env:
        GITHUB_TOKEN: ${{ github.token }}
      shell: bash
      run: |
        commitShas='${{ join(github.event.commits.*.id, ' ') }}'
        declare -A changedFiles
        for sha in $commitShas; do
          commits=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/repos/${{ github.repository }}/commits/${sha}")
          filenames=$(jq --join-output '.files[] | select(.status == "modified" or .status == "added") | "\(.filename) "' <<<"${commits}")
          for filename in $filenames; do
            changedFiles[$filename]=1
          done
        done
        echo "changedFiles=$changedFiles" >> $GITHUB_OUTPUT

    - name: "Evaluate Changes that are under the inputs.paths (split by comma)"
      id: evaluateStep
      shell: bash
      run: |
        inputPaths="${{ inputs.paths }}"

        echo "Checking if any file starts with $inputPaths"

        # ensure inputPaths has at least one comma
        if [[ $inputPaths != *","* ]]; then
          inputPaths="$inputPaths,"
        fi

        echo "Splitting paths by comma"

        # split the paths by comma
        IFS=',' read -ra paths <<< "${inputPaths}"
        echo "Paths: ${paths[@]}"

        # split files step output changedFiles by space
        IFS=' ' read -ra changedFiles <<< "${{ steps.files.outputs.changedFiles }}"
        echo "Files: ${changedFiles[@]}"

        hasChanges=false
        pathsWithChanges=""

        for path in "${paths[@]}"; do
          # ensure path does not start with ./
          if [[ $path == "./"* ]]; then
            path="${path#./}"
          fi

          # ensure path ends with /
          path="${path%/}/"

          # if is root path, should always be true
          if [[ $path == "/" ]]; then
              echo "Root path detected, all files are considered changed"
              pathsWithChanges="$path,$pathsWithChanges"
              hasChanges=true
              break
          fi

          # check if any file starts with the path
          for file in "${changedFiles[@]}"; do
            if [[ $file == "$path"* ]]; then
              echo "Found changes in path $path"
              pathsWithChanges="$path,$pathsWithChanges"
              hasChanges=true
              break
            fi
          done
        done
        pathsWithChanges=${pathsWithChanges:-1}

        # set the output with the result
        echo "hasChanges=$hasChanges" >> $GITHUB_OUTPUT
        echo "pathsWithChanges=$pathsWithChanges" >> $GITHUB_OUTPUT
