name: "Deploy"
description: "Create a GitHub deployments, attempts to deploy and update deployment status."

inputs:
  githubToken:
    description: GitHub token
    required: true
  type:
    description: "The type of the deployment (ex: kubernetes, nuget, amplify, etc.)"
    required: true
  tag:
    description: "The version tag associated with the deployment"
    required: true
  artifact-name:
    description: "Name of the artifact being deployed, it can be a docker image, a nuget package, etc."
    required: true
  service:
    description: "Name of the service being deployed"
  serviceRegistry:
    description: "Service registry url to push the artifact to."
    required: false
    type: string
    default: ""
  actionsRepoRef:
    description: "Run actions from this ref. Default is master."
    type: string
    required: false
    default: "master"

runs:
  using: composite

  steps:
    - name: Check inputs
      shell: bash
      run: |
        if [[ "${{ inputs.type }}" != "kubernetes" 
          && "${{ inputs.type }}" != "nuget" ]]; then
          echo "Unsupported deployment type: ${{ inputs.type }}"
          exit 1
        fi

    - name: Checkout trakx/github-actions repo
      uses: actions/checkout@v3
      with:
        repository: trakx/github-actions
        path: ./trakx-github-actions-deploy
        ref: ${{ inputs.actionsRepoRef }}

    - name: Pick Environment and RunnerName
      id: pick-environment-setup
      uses: ./trakx-github-actions-deploy/pick-environment-setup

    - name: Set variable SERVICE_REGISTRY_URL
      shell: bash
      run: |
        registry="${{ inputs.serviceRegistry }}"
        if [[ -z "$registry" ]]; then
          if [[ "${{ inputs.type }}" == "kubernetes" ]]; then
            registry="docker.pkg.github.com"
          elif [[ "${{ inputs.type }}" == "nuget" ]]; then
            registry="nuget.pkg.github.com"
          fi
        fi
        echo "SERVICE_REGISTRY_URL=$registry" >> $GITHUB_ENV

    - name: Create GitHub deployment
      uses: chrnorm/deployment-action@v2
      id: create-deployment
      with:
        token: '${{ inputs.githubToken }}'
        environment: ${{steps.pick-environment-setup.outputs.environment}}
        payload: |
            { 
                "artifactName" : "${{ inputs.artifact-name }}",
                "deploymentType" : "${{ inputs.type }}", 
                "service" : "${{ inputs.service }}",
                "tag" : "${{ inputs.tag }}"
            }

    ### Deployment types switch ###

    ###### Kubernetes deployments ######
    - name: Deploy to Kubernetes
      if: ${{ inputs.type == 'kubernetes' }}
      uses: ./trakx-github-actions-deploy/deploy-docker-image
      with:
        serviceName: ${{ inputs.service }}
        containerImage: "${{env.SERVICE_REGISTRY_URL}}/$GITHUB_REPOSITORY/${{inputs.artifact-name}}"
        tag: ${{ inputs.tag }}

    ###### Nuget deployments ######
    - name: Deploy Nuget
      if: ${{ inputs.type == 'nuget' }}
      shell: bash
      run: |
        echo "pushing ${{ inputs.artifact-name }} to ${{ env.SERVICE_REGISTRY_URL }}"

    ### End of Deployment types switch ###

    - name: Update GitHub deployment status (success)
      if: success()
      uses: chrnorm/deployment-status@v2
      with:
        token: '${{ inputs.githubToken }}'
        state: 'success'
        deployment-id: ${{ steps.create-deployment.outputs.deployment_id }}

    - name: Update GitHub deployment status (failure)
      if: failure()
      uses: chrnorm/deployment-status@v2
      with:
        token: '${{ inputs.githubToken }}'
        state: 'failure'
        deployment-id: ${{ steps.create-deployment.outputs.deployment_id }}
