name: "Deploy"
description: "Create a GitHub deployments, attempts to deploy and update deployment status."

inputs:
  githubToken:
    description: GitHub token
    required: true
  environment:
    description: "The environment targeted for the deployment"
    required: true
  type:
    description: "The type of the deployment (ex: kubernetes, nuget, amplify, etc.)"
    required: true
  runner-name:
    description: "The name of the runner used to perform the deployment"
    required: true
  tag:
    description: "The version tag associated with the deployment"
    required: true
  artifact-name:
    description: "Name of the artifact being deployed, it can be a docker image, a nuget package, etc."
    required: true
  service:
    description: "Name of the service being deployed"

runs:

  using: composite

  steps:
    - name: Check inputs
      shell: bash
      run: |
        if [[ "${{ inputs.environment }}" != "production" 
          && "${{ inputs.environment }}" != "staging" 
          && "${{ inputs.environment }}" != "development" ]]; then
            echo "Unsupported environment: ${{ inputs.environment }}"
          exit 1
        fi
        if [[ "${{ inputs.type }}" != "kubernetes" 
          && "${{ inputs.type }}" != "nuget" ]]; then
          echo "Unsupported deployment type: ${{ inputs.environment }}"
          exit 1
        fi

    - name: Create GitHub deployment
      uses: chrnorm/deployment-action@v2
      id: create-deployment
      with:
        token: '${{ inputs.githubToken }}'
        environment: ${{ inputs.environment}}
        payload: |
            { 
                "artifactName" : "${{ inputs.artifact-name }}",
                "deploymentType" : "${{ inputs.type }}", 
                "service" : "${{ inputs.service }}",
                "tag" : "${{ inputs.tag }}"
            }

    ###### Deployment types switch ######

    ###### Kubernetes deployments ######

    - name: Install Kubernetes & Kustomize
      #Since github runners working in Docker-in-Docker mode we need this workaround
      if: ${{ inputs.type == 'kubernetes' }}
      shell: bash
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/kustomize

    - name: Deploy Image to Kubernetes
      if: ${{ inputs.type == 'kubernetes' }}
      shell: bash
      env:
        DOCKER_REGISTRY: "docker.pkg.github.com"
      run: |
        echo "deploying ${{ inputs.service }}"
        echo "cd deployment/${{inputs.service}}/overlays/${{inputs.environment}}/""
        echo "kustomize edit set image ${{inputs.service}}=$DOCKER_REGISTRY/$GITHUB_REPOSITORY/${{inputs.artifact-name}}:${{inputs.tag}}"
        echo "kustomize build . | kubectl apply --validate=false -f -""

    ###### Nuget deployments ######

    - name: Deploy Nuget
      if: ${{ inputs.type == 'nuget' }}
      shell: bash
      env:
        NUGET_REGISTRY: "nuget.pkg.github.com"
      run: |
        echo "pushing ${{ inputs.artifact-name }} to $NUGET_REGISTRY"

    ###### End of Deployment types switch ######

    - name: Update GitHub deployment status (success)
      if: success()
      uses: chrnorm/deployment-status@v2
      with:
        token: '${{ inputs.githubToken }}'
        state: 'success'
        deployment-id: ${{ steps.create-deployment.outputs.deployment_id }}

    - name: Update GitHub deployment status (failure)
      if: failure()
      uses: chrnorm/deployment-status@v2
      with:
        token: '${{ inputs.githubToken }}'
        state: 'failure'
        deployment-id: ${{ steps.create-deployment.outputs.deployment_id }}