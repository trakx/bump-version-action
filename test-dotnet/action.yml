name: "Build and test dotnet solution"
description: "Github action to build and test a dotnet solution, posting code coverage results to codacy."

inputs:
  packageReadonlyPat:
    description: "Personal access token used to access the github private nuget source."
    required: true
  codacyToken:
    description: "Token used to identify the project on codacy."
    required: true
  awsAccessKeyId:
    description: "Access key used to connect to the AWS environment."
    required: true
  awsAccessKeySecret:
    description: "Access secret used to connect to the AWS environment."
    required: true
  awsRegion:
    description: "Region on which to access the AWS environment."
    required: false
    default: "eu-west-3"
  dotnetVersion:
    description: "Version of dotnet to use."
    required: true
  actionsRepoRef:
    description: "Run actions from this ref. Default is master."
    required: false
    default: "master"

outputs:
  eventCommits:
    description: "Event commit ids"
    value: ${{ steps.getEventCommits.outputs.eventCommits }}

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Checkout trakx/github-actions repo
      uses: actions/checkout@v4
      with:
        repository: trakx/github-actions
        path: ./github-actions-test-dotnet
        ref: ${{ inputs.actionsRepoRef }}

    - name: Restore and cache private nuget packages
      uses: ./github-actions-test-dotnet/restore-dotnet
      env:
        DOTNET_NOLOGO: true
      with:
        dotnetVersion: ${{inputs.dotnetVersion}}
        packageReadonlyPat: ${{inputs.packageReadonlyPat}}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4.0.1
      with:
        aws-access-key-id: ${{inputs.awsAccessKeyId}}
        aws-secret-access-key: ${{inputs.awsAccessKeySecret}}
        aws-region: ${{inputs.awsRegion}}

    # Output event commit ids as an artifact
    # This is necessary to allow to load the event commits from triggered workflows from this one
    - name: Output the event commits to an artifact
      uses: ./github-actions-test-dotnet/create-event-commits-artifact

    # GitHubActionsTestLogger nuget package should be installed in the test project.
    # coverlet.msbuild nuget package should be installed to generate coverage report.
    # The loop is necessary to prevent the following error:
    #  "Could not find a test logger with AssemblyQualifiedName, URI or FriendlyName 'GitHubActions'."
    - name: .NET Test
      shell: bash
      run: |
        for f in $(find . -name "*.Tests.csproj");
        do
          echo "[DEBUG] Testing project $f" && \
          csprojName=${f##*/} && \
          projectName="${csprojName/.csproj/}" && \
          dotnet test $f \
            --no-restore \
            --configuration Debug \
            --logger GitHubActions \
            --collect "XPlat Code Coverage" \
            --results-directory "TestResults/$projectName"
        done

    # .NET Test puts the coverage file under a random directory [Guid]/coverage.cobertura.xml
    # That's why we locate the coverage file first and pass it to the upload script
    - name: Publish Coverage
      shell: bash
      env:
        CODACY_PROJECT_TOKEN: ${{inputs.codacyToken}}
      run: |
        bash <(curl -Ls https://coverage.codacy.com/get.sh) report -l csharp \
        $(find ./TestResults -name 'coverage.cobertura.xml' | sed 's,^, -r ,' | xargs echo)
