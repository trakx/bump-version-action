name: "Build and test dotnet solution"
description: "Github action to build and test a dotnet solution, posting code coverage results to codacy."

inputs:
  packageReadonlyPat:
    description: "Personal access token used to access the github private nuget source."
    required: true
  awsAccessKeyId:
    description: "Access key used to connect to the AWS environment."
    required: true
  awsAccessKeySecret:
    description: "Access secret used to connect to the AWS environment."
    required: true
  awsRegion:
    description: "Region on which to access the AWS environment."
    required: false
    default: "eu-west-3"
  dotnetVersion:
    description: "Version of dotnet to use. Default is v7.x."
    required: false
    default: "7.x"
  minimumCoverage:
    description: "Minimum code coverage rate=, below that rate, the build fails."
    required: false
    default: "10"
  actionsRepoRef:
    description: "Run actions from this ref. Default is master."
    required: false
    default: "master"

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: ${{inputs.fetchDepth}}

    - name: Checkout trakx/github-actions repo
      uses: actions/checkout@v4
      with:
        repository: trakx/github-actions
        path: ./github-actions-test-dotnet
        ref: ${{ inputs.actionsRepoRef }}

    - name: Restore and cache private nuget packages
      uses: ./github-actions-test-dotnet/restore-dotnet
      with:
        dotnetVersion: ${{inputs.dotnetVersion}}
        packageReadonlyPat: ${{inputs.packageReadonlyPat}}

    - name: .NET Build
      shell: bash
      run: |
        for f in $(find . -name "*.sln"); do echo "restoring solution $f" && \
          dotnet build $f --configuration Debug --no-restore
        done

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{inputs.awsAccessKeyId}}
        aws-secret-access-key: ${{inputs.awsAccessKeySecret}}
        aws-region: ${{inputs.awsRegion}}
    
    # GitHubActionsTestLogger nuget package should be installed in the test project 
    # coverlet.msbuild nuget package should be installed to generate coverage report
    - name: .NET Test
      shell: bash
      run: |
        for f in $(find . -name "*.Tests.csproj"); do echo "testing project $f" && \
          csprojName=${f##*/} && \
          projectName="${csprojName/.csproj/}" && \
          dotnet test $f --configuration Debug --no-restore --logger GitHubActions --collect "XPlat Code Coverage" --results-directory "coverage"
        done
    
    - name: Code Coverage Summary Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: 'coverage/*/coverage.cobertura.xml'
        badge: true
        format: 'markdown'
        output: 'both'
        thresholds: "${{inputs.minimumCoverage}} 80"
        fail_below_min: true

    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2.8.0
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: code-coverage-results.md

    - name: Write to Job Summary
      shell: bash
      run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY
