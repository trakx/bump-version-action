name: "Build and test dotnet solution"
description: "Github action to build and test a dotnet solution, posting code coverage results to codacy."

inputs:
  packageReadonlyPat:
    description: "Personal access token used to access the github private nuget source."
    required: true
  codacyToken:
    description: "Token used to identify the project on codacy."
    required: true
  awsAccessKeyId:
    description: "Access key used to connect to the AWS environment."
    required: true
  awsAccessKeySecret:
    description: "Access secret used to connect to the AWS environment."
    required: true
  awsRegion:
    description: "Region on which to access the AWS environment."
    required: false
    default: "eu-west-3"

runs:
  using: "composite"
  env:
      COVER_REPORT_FILE: "~/test/coverage.xml"
  steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: .NET Install
      env:
        DOTNET_INSTALL_DIR: "./.dotnet"  # Required by the runner to install dotnet
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.x

    - name: Add Trakx github nuget source
      shell: bash
      run: dotnet nuget add source "https://nuget.pkg.github.com/trakx/index.json"
                  --name "github"
                  --username "trakx-bot"
                  --password ${{inputs.packageReadonlyPat}}
                  --store-password-in-clear-text

    - name: Restore Cache
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: ${{ runner.os }}-nuget-

    - name: .NET Restore packages
      shell: bash
      run: |
        for f in ./src/*.sln; do echo "restoring solution $f" && \
          dotnet restore $f --locked-mode
        done

    - name: Remove Trakx github source
      shell: bash
      run: dotnet nuget remove source "github"

    - name: .NET Build
      shell: bash
      run: |
        for f in ./src/*.sln; do echo "restoring solution $f" && \
          dotnet build $f --configuration Debug --no-restore
        done

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{inputs.awsAccessKeyId}}
        aws-secret-access-key: ${{inputs.awsAccessKeySecret}}
        aws-region: ${{inputs.awsRegion}}
    
    # GitHubActionsTestLogger nuget package should be installed in the test project 
    # coverlet.msbuild nuget package should be installed to generate coverage report
    - name: .NET Test
      shell: bash
      run: |
        for f in ./src/*.Tests/*.Tests.csproj; do echo "testing project $f" && \
          dotnet test $f --configuration Debug --no-restore --logger GitHubActions --collect "XPlat Code Coverage" --results-directory "TestResults"
        done
    
    # .NET Test puts the coverage file under a random directory [Guid]/coverage.cobertura.xml
    # That's why we locate the coverage file first and pass it to the upload script
    - name: Publish Coverage
      shell: bash
      env:
        CODACY_PROJECT_TOKEN: ${{inputs.codacyToken}}
      run: |
        for f in ./TestResults/*/coverage.cobertura.xml; do echo "sending coverage report $f" && \
            bash <(curl -Ls https://coverage.codacy.com/get.sh) report -l csharp -r $f \
                --partial --commit-uuid ${{github.sha}}; \
        done
        bash <(curl -Ls https://coverage.codacy.com/get.sh) final --commit-uuid ${{github.sha}}
