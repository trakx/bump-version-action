name: "Build and push container image"
description: "Builds a docker image and pushes it to the github registry, Outputs the generated container image version. Requires Microsoft.NET.Build.Containers package installed."

inputs:
  githubToken:
    description: "Access token provided by the calling action context, used to publish the packages and push the corresponding tag."
    required: true
  packageReadonlyPat:
    description: "Personal access token used to access the github private nuget source."
    required: true
  projectFolder:
    description: "Folder containing the project to build."
    required: true
    type: string
  imageName:
    description: "Name of the docker image to build."
    required: true
    type: string
  imageTagPrefix:
    description: "Prefix of the docker image tag."
    required: true
    type: string
  containerPublishType:
    description: "Type of container publish (api | worker)."
    required: true
    type: string
  dotnetVersion:
    description: "Version of dotnet to use. Default is v7.x."
    required: false
    type: string
    default: "7.x"
  dockerRegistry:
    description: "Docker registry to push the image to."
    required: false
    type: string
    default: "docker.pkg.github.com"

outputs:
  tag:
    description: "Docker Image Tag"
    value: ${{ steps.setImageTag.outputs.tag}}

runs:
  using: "composite"
  steps:
    # - name: Checkout
    #   uses: actions/checkout@v3
    - name: Set Variable COMMIT_SHORT_HASH (commit shortened commit hash)
      shell: bash
      run: |
        short_hash="${{ github.sha }}"
        echo "Commit hash: $short_hash"

    # - name: .NET Install
    #   env:
    #     DOTNET_INSTALL_DIR: "./.dotnet"  # Required by the runner to install dotnet
    #   uses: actions/setup-dotnet@v3
    #   with:
    #     dotnet-version: ${{ inputs.dotnetVersion }}

    # - name: Add Trakx Github Nuget Source
    #   shell: bash
    #   run: dotnet nuget add source "https://nuget.pkg.github.com/trakx/index.json"
    #               --name "github"
    #               --username "trakx-bot"
    #               --password ${{inputs.packageReadonlyPat}}
    #               --store-password-in-clear-text

    # - name: Restore Cache
    #   uses: actions/cache@v3
    #   with:
    #     path: ~/.nuget/packages
    #     key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
    #     restore-keys: ${{ runner.os }}-nuget-

    # - name: Set Variable WORKDIR
    #   shell: bash
    #   run: echo "WORKDIR=${{github.workspace}}/${{inputs.projectFolder}}" >> $GITHUB_ENV

    # - name: Set Variable DATE
    #   shell: bash
    #   run: echo "DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV

    # - name: Set Variable COMMIT_SHORT_HASH (commit shortened commit hash)
    #   shell: bash
    #   run: |
    #     short_hash="${{ github.sha }}"
    #     echo "COMMIT_SHORT_HASH=$short_hash" >> $GITHUB_OUTPUT

    # - name: Set Variable tag
    #   shell: bash
    #   run: echo "tag=${{inputs.imageTagPrefix}}-${{env.DATE}}-${{github.run_number}}-${{env.COMMIT_SHORT_HASH}}" >> $GITHUB_ENV

    # - name: Set Variable IMAGEPATH
    #   shell: bash
    #   run: echo "IMAGEPATH=${{inputs.dockerRegistry}}/$GITHUB_REPOSITORY/${{inputs.imageName}}" >> $GITHUB_ENV
      
    # - name: .NET Restore
    #   shell: bash
    #   working-directory: ${{env.WORKDIR}}
    #   run: dotnet restore --locked-mode

    # - name: Remove Trakx github source
    #   shell: bash
    #   run: dotnet nuget remove source "github"

    # - name: .NET Build
    #   shell: bash
    #   working-directory: ${{env.WORKDIR}}
    #   run: dotnet build

    # # https://learn.microsoft.com/en-us/dotnet/core/docker/publish-as-container
    # - name: .NET Publish Container (API)
    #   if: ${{inputs.containerPublishType == 'api'}}
    #   shell: bash
    #   working-directory: ${{env.WORKDIR}}
    #   run: >
    #       dotnet publish --os linux --arch x64
    #       -p:PublishProfile=DefaultContainer
    #       -p:ContainerImageName=${{inputs.imageName}}
    #       -p:ContainerImageTag=${{env.tag}}
    #       -c Release

    # - name: .NET Publish Container (Worker)
    #   if: ${{inputs.containerPublishType == 'worker'}}
    #   shell: bash
    #   working-directory: ${{env.WORKDIR}}
    #   run: >
    #       dotnet publish --os linux --arch x64
    #       /t:PublishContainer
    #       -p:ContainerImageName=${{inputs.imageName}}
    #       -p:ContainerImageTag=${{env.tag}}
    #       -c Release

    # - name: Login to Docker Hub
    #   uses: docker/login-action@v2
    #   with:
    #     registry: "${{inputs.dockerRegistry}}"
    #     username: "${{github.actor}}"
    #     password: "${{inputs.githubToken}}"
      
    # - name: Tag Image
    #   shell: bash
    #   run: docker tag ${{inputs.imageName}}:${{env.tag}} ${{env.IMAGEPATH}}:${{env.tag}}

    # - name: Push Image to Registry
    #   shell: bash
    #   run: docker push ${{env.IMAGEPATH}}:${{env.tag}}

    # - name: Output tag
    #   shell: bash
    #   id: setImageTag
    #   run: echo "tag=${{env.tag}}" >> $GITHUB_OUTPUT
