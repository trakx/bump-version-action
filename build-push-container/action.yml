name: "Build and push container image"
description: "Builds a docker image and pushes it to the github registry, Outputs the generated container image version. Requires Microsoft.NET.Build.Containers package installed."

inputs:
  githubToken:
    description: "Access token provided by the calling action context, used to publish the packages and push the corresponding tag."
    required: true
  packageReadonlyPat:
    description: "Personal access token used to access the github private nuget source."
    required: true
  projectFolder:
    description: "Folder containing the project to build."
    required: true
    type: string
  imageName:
    description: "Name of the docker image to build."
    required: true
    type: string
  imageTagPrefix:
    description: "Prefix of the docker image tag."
    required: true
    type: string
  imageTagSuffix:
    description: "Suffix of the docker image tag. If not provided, will load the last commit sha."
    required: false
    type: string
  containerPublishType:
    description: "Type of container publish (api | worker)."
    required: true
    type: string
  dotnetVersion:
    description: "Version of dotnet to use. Default is v7.x."
    required: false
    type: string
    default: "7.x"
  dockerRegistry:
    description: "Docker registry to push the image to."
    required: false
    type: string
    default: "docker.pkg.github.com"
  doCheckout:
    description: "Whether to checkout the repository or not."
    required: false
    type: boolean
    default: true

outputs:
  tag:
    description: "Docker Image Tag"
    value: ${{ steps.setImageTag.outputs.tag}}

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v3
      if: ${{inputs.doCheckout == true}}

    - name: .NET Install
      env:
        DOTNET_INSTALL_DIR: "./.dotnet" # Required by the runner to install dotnet
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ inputs.dotnetVersion }}

    - name: Add Trakx Github Nuget Source
      shell: bash
      run: >
        dotnet nuget add source "https://nuget.pkg.github.com/trakx/index.json"
        --name "github"
        --username "trakx-bot"
        --password ${{inputs.packageReadonlyPat}}
        --store-password-in-clear-text

    - name: Restore Cache
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: ${{ runner.os }}-nuget-

    - name: Set Variable WORKDIR
      shell: bash
      run: echo "WORKDIR=${{github.workspace}}/${{inputs.projectFolder}}" >> $GITHUB_ENV

    - name: Set Variable DATE
      shell: bash
      run: echo "DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV

    - name: Load last commit sha
      uses: ./github-actions/get-last-commit
      id: last-commit-sha

    - name: Set Variable TAG_SUFFIX
      shell: bash
      run: |
        new_tag_suffix="${{inputs.imageTagSuffix}}"

        if [ -z $new_tag_suffix ]; then
          if [ -z "${{steps.last-commit-sha.outputs.lastCommitSha}}" ]; then
            new_tag_suffix="${{github.run_number}}"
          else
            new_tag_suffix="${{github.run_number}}-${{steps.last-commit-sha.outputs.lastCommitSha}}"
          fi
        fi
        echo "TAG_SUFFIX=$new_tag_suffix" >> $GITHUB_ENV

    - name: Set Variable tag (will be used in the output)
      shell: bash
      run: |
        generated_tag=${{inputs.imageTagPrefix}}-${{env.DATE}}-${{env.TAG_SUFFIX}}
        echo "Generated container image tag: $generated_tag"
        echo "tag=$generated_tag" >> $GITHUB_ENV

    - name: Set Variable IMAGEPATH
      shell: bash
      run: echo "IMAGEPATH=${{inputs.dockerRegistry}}/$GITHUB_REPOSITORY/${{inputs.imageName}}" >> $GITHUB_ENV

    - name: .NET Restore
      shell: bash
      working-directory: ${{env.WORKDIR}}
      run: dotnet restore --locked-mode

    - name: Remove Trakx github source
      shell: bash
      run: dotnet nuget remove source "github"

    - name: .NET Build
      shell: bash
      working-directory: ${{env.WORKDIR}}
      run: dotnet build

    # https://learn.microsoft.com/en-us/dotnet/core/docker/publish-as-container
    - name: .NET Publish Container (API)
      if: ${{inputs.containerPublishType == 'api'}}
      shell: bash
      working-directory: ${{env.WORKDIR}}
      run: >
        dotnet publish --os linux --arch x64
        -p:PublishProfile=DefaultContainer
        -p:ContainerImageName=${{inputs.imageName}}
        -p:ContainerImageTag=${{env.tag}}
        -c Release

    - name: .NET Publish Container (Worker)
      if: ${{inputs.containerPublishType == 'worker'}}
      shell: bash
      working-directory: ${{env.WORKDIR}}
      run: >
        dotnet publish --os linux --arch x64
        /t:PublishContainer
        -p:ContainerImageName=${{inputs.imageName}}
        -p:ContainerImageTag=${{env.tag}}
        -c Release

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        registry: "${{inputs.dockerRegistry}}"
        username: "${{github.actor}}"
        password: "${{inputs.githubToken}}"

    - name: Tag Image
      shell: bash
      run: docker tag ${{inputs.imageName}}:${{env.tag}} ${{env.IMAGEPATH}}:${{env.tag}}

    - name: Push Image to Registry
      shell: bash
      run: docker push ${{env.IMAGEPATH}}:${{env.tag}}

    - name: Output container image tag
      shell: bash
      id: setImageTag
      run: echo "tag=${{env.tag}}" >> $GITHUB_OUTPUT
