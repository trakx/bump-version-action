name: "Build and push dotnet container image"
description: "Builds a docker image and pushes it to the github registry. Outputs the generated container image version."

inputs:
  githubToken:
    description: "Access token provided by the calling action context, used to publish the packages and push the corresponding tag."
    required: true
  packageReadonlyPat:
    description: "Personal access token used to access the github private nuget source."
    required: true
  projectFolder:
    description: "Folder containing the project to build."
    required: true
  imageName:
    description: "Name of the docker image to build."
    required: true
  imageTagPrefix:
    description: "Prefix of the docker image tag."
    required: true
  imageTagSuffix:
    description: "Suffix of the docker image tag. If not provided, will load the last commit sha."
    required: false
  containerPublishType:
    description: "Type of container publish (api | worker)."
    required: true
  dotnetVersion:
    description: "Version of dotnet to use. Default is v7.x."
    required: false
    default: "7.x"
  dockerRegistry:
    description: "Docker registry to push the image to."
    required: false
    default: "docker.pkg.github.com"
  actionsRepoRef:
    description: "Run actions from this ref. Default is master."
    required: false
    default: "master"
  doCheckout:
    description: "Whether to checkout the repository or not."
    required: false
    default: "true"

outputs:
  tag:
    description: "Docker Image Tag"
    value: ${{ steps.setImageTag.outputs.tag}}

runs:
  using: "composite"
  steps:

    - name: Checkout trakx/github-actions repo
      uses: actions/checkout@v4
      with:
        repository: trakx/github-actions
        path: ./github-actions-build-push-container-image
        ref: ${{ inputs.actionsRepoRef }}

    - name: Restore and cache private nuget packages
      uses: ./github-actions-build-push-container-image/restore-dotnet
      with:
        dotnetVersion: ${{inputs.dotnetVersion}}
        packageReadonlyPat: ${{inputs.packageReadonlyPat}}

    - name: Set Variable WORKDIR
      shell: bash
      run: echo "WORKDIR=${{github.workspace}}/${{inputs.projectFolder}}" >> $GITHUB_ENV

    - name: Set Variable DATE
      shell: bash
      run: echo "DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV

    - name: Load last commit sha
      uses: ./github-actions-build-push-container-image/get-last-commit
      id: last-commit-sha

    - name: Set Variable TAG_SUFFIX
      shell: bash
      run: |
        new_tag_suffix="${{inputs.imageTagSuffix}}"
        if [ -z "${{inputs.imageTagSuffix}}" ]; then
          new_tag_suffix="${{steps.last-commit-sha.outputs.lastCommitSha}}"
        fi
        if [ -z $new_tag_suffix ]; then
          new_tag_suffix="${{github.run_number}}"
        else
          new_tag_suffix="${{github.run_number}}-$new_tag_suffix"
        fi
        echo "TAG_SUFFIX=$new_tag_suffix" >> $GITHUB_ENV

    - name: Set Variable tag (will be used in the output)
      shell: bash
      run: |
        generated_tag=${{inputs.imageTagPrefix}}-${{env.DATE}}-${{env.TAG_SUFFIX}}
        echo "Generated container image tag: $generated_tag"
        echo "tag=$generated_tag" >> $GITHUB_ENV

    - name: Set Variable IMAGEPATH
      shell: bash
      run: echo "IMAGEPATH=${{inputs.dockerRegistry}}/$GITHUB_REPOSITORY/${{inputs.imageName}}" >> $GITHUB_ENV

    - name: Install Microsoft.NET.Build.Containers (Worker)
      if: ${{inputs.containerPublishType == 'worker'}}
      shell: bash
      working-directory: ${{env.WORKDIR}}
      run: |
        DOTNET_VERSION="${{inputs.dotNetVersion}}"
        CONTAINERS_LIB_VERSION="${DOTNET_VERSION/x/\*}"
        dotnet add package Microsoft.NET.Build.Containers --version "${CONTAINERS_LIB_VERSION}"

    # https://learn.microsoft.com/en-us/dotnet/core/docker/publish-as-container
    - name: .NET Publish Container (API)
      if: ${{inputs.containerPublishType == 'api'}}
      shell: bash
      working-directory: ${{env.WORKDIR}}
      run: >
        dotnet publish --os linux --arch x64
        -p:PublishProfile=DefaultContainer
        -p:ContainerRepository=${{inputs.imageName}}
        -p:ContainerImageTag=${{env.tag}}
        -c Release

    - name: .NET Publish Container (Worker)
      if: ${{inputs.containerPublishType == 'worker'}}
      shell: bash
      working-directory: ${{env.WORKDIR}}
      run: >
        dotnet publish --os linux --arch x64
        /t:PublishContainer
        -p:ContainerRepository=${{inputs.imageName}}
        -p:ContainerImageTag=${{env.tag}}
        -c Release

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: "${{inputs.dockerRegistry}}"
        username: "${{github.actor}}"
        password: "${{inputs.githubToken}}"

    - name: Tag Image
      shell: bash
      run: docker tag ${{inputs.imageName}}:${{env.tag}} ${{env.IMAGEPATH}}:${{env.tag}}

    - name: Push Image to Registry
      shell: bash
      run: docker push ${{env.IMAGEPATH}}:${{env.tag}}

    - name: Output container image tag
      shell: bash
      id: setImageTag
      run: echo "tag=${{env.tag}}" >> $GITHUB_OUTPUT
