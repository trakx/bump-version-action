name: "NEW - Publish nuget packages"
description: "Github action used to publish nuget packages to the private github nuget repository."

inputs:
  githubToken:
    description: "Access token provided by the calling action context, used to publish the packages and push the corresponding tag."
    required: true
  packageReadonlyPat:
    description: "Personal access token used to access the github private nuget source."
    required: true
  debuggable:
    description: "If true (default), publish a pre-release version. If false, publish a release version."
    required: false
    default: "true"
  semverIncrementLevel:
    description: "Level of the semver (major.minor.patch) to be increased to get the new package version."
    required: false
    default: "patch"
  actionsRepoRef:
    description: "Run actions from this ref. Default is master."
    required: false
    default: "master"
  dotnetVersion:
    description: "Version of dotnet to use."
    required: true

  publishOnlyWithChanges:
    description: "If true, only publish if there are changes in the packable projects."
    required: false
    default: "true"

  publishAllWhenAnyHasChanges:
    description: "If true, publish all packable projects when any of them has changes."
    required: false
    default: "false"

  publishAllRegardlessChanges:
    description: "If true, publish all packable projects, regardless of changes."
    required: false
    default: "false"

runs:
  using: "composite"
  steps:

    - name: Validate publish type inputs
      id: validate-publish-type
      shell: bash
      run: |
        # normalize the inputs
        publishOnlyWithChanges=false
        publishAllWhenAnyHasChanges=false
        publishAllRegardlessChanges=false

        echo "publishOnlyWithChanges input: ${{ inputs.publishOnlyWithChanges }}"
        echo "publishAllWhenAnyHasChanges input: ${{ inputs.publishAllWhenAnyHasChanges }}"
        echo "publishAllRegardlessChanges input: ${{ inputs.publishAllRegardlessChanges }}"

        if [[ ${{ inputs.publishOnlyWithChanges }} == t* || ${{ inputs.publishOnlyWithChanges }} == T* ]]; then
          echo "publishOnlyWithChanges input is true"
          publishOnlyWithChanges=true
        fi
        if [[ ${{ inputs.publishAllWhenAnyHasChanges }} == t* || ${{ inputs.publishAllWhenAnyHasChanges }} == T* ]]; then
          echo "publishAllWhenAnyHasChanges input is true"
          publishAllWhenAnyHasChanges=true
        fi
        if [[ ${{ inputs.publishAllRegardlessChanges }} == t* || ${{ inputs.publishAllRegardlessChanges }} == T* ]]; then
          echo "publishAllRegardlessChanges input is true"
          publishAllRegardlessChanges=true
        fi

        # if all inputs are false, an error must be raised
        if [[ $publishOnlyWithChanges == false && $publishAllWhenAnyHasChanges == false && $publishAllRegardlessChanges == false ]]; then
          echo "Set one of the publish mode input: publishOnlyWithChanges, publishAllWhenAnyHasChanges or publishAllRegardlessChanges."
          exit 1
        fi

        # if more than one input is true, an error must be raised
        if [[ $publishOnlyWithChanges == true && $publishAllWhenAnyHasChanges == true ]]; then
          echo "Set only one of the publish mode input: publishOnlyWithChanges or publishAllWhenAnyHasChanges."
          exit 1
        fi

        if [[ $publishAllWhenAnyHasChanges == true && $publishAllRegardlessChanges == true ]]; then
          echo "Set only one of the publish mode input: publishOnlyWithChanges or publishAllRegardlessChanges."
          exit 1
        fi

        if [[ $publishOnlyWithChanges == true && $publishAllRegardlessChanges == true ]]; then
          echo "Set only one of the publish mode input: publishAllWhenAnyHasChanges or publishAllRegardlessChanges."
          exit 1
        fi

        # echo the selected publish mode and output it
        if [ $publishAllRegardlessChanges == true ]; then
          echo "Publish mode selected: Publishing all packable projects regardless of changes."
          echo "mode=all" >> $GITHUB_OUTPUT
        elif [ $publishAllWhenAnyHasChanges == true ]; then
          echo "Publish mode selected: Publishing all packable projects when any of them has changes."
          echo "mode=any" >> $GITHUB_OUTPUT
        elif [ $publishOnlyWithChanges == true ]; then
          echo "Publish mode selected: Publishing only packable projects with changes."
          echo "mode=changed" >> $GITHUB_OUTPUT
        fi

    - name: Set compilation mode
      shell: bash
      id: comp-mode
      run: |
        if [ [${{ inputs.debuggable }} == f*] -o [${{ inputs.debuggable }} == F*] ]; then
          COMP_MODE=Release
        else
          COMP_MODE=Debug
        fi
        echo "compilationMode=$COMP_MODE" >> $GITHUB_OUTPUT
        echo "compilation mode set to $COMP_MODE"

    - name: Checkout
      uses: actions/checkout@v4

    - name: Checkout actions repo
      uses: actions/checkout@v4
      with:
        repository: trakx/github-actions
        path: ./github-actions-publish-nuget
        ref: ${{ inputs.actionsRepoRef }}

    - name: Load packable projects (and add them split by comma to an output)
      id: project-paths
      shell: bash
      run: |
        PROJECTS=""
        PATHS=""
        # find all projects that have the Packable.Projects.props file included
        for project in $(find ./src -name "*.csproj" -exec grep -rl "Packable.Projects.props" {} \;); do echo "packaging project $project" && \
          PROJECTS="$PROJECTS,$project";
        done
        PROJECTS=${PROJECTS:1}

        # get the path of the projects
        IFS=',' read -ra projectsList <<< "$PROJECTS"
        for projectCursor in "${projectsList[@]}"; do
          PATHS="$PATHS,${projectCursor%/*}"
        done
        PATHS=${PATHS:1}

        echo "Projects available to publish: $PROJECTS"
        echo "Path of the projects available to publish: $PATHS"

        echo "projects=$PROJECTS" >> $GITHUB_OUTPUT
        echo "paths=$PATHS" >> $GITHUB_OUTPUT

    - name: Check if there are changes in the packable projects
      uses: ./github-actions-publish-nuget/git-diff
      id: git-diff
      with:
        paths: ${{ steps.project-paths.outputs.paths }}

    - name: Load projects to be packaged based on the publish mode
      if: ${{ steps.git-diff.outputs.hasChanges == 'true' }}
      shell: bash
      id: load-projects-to-package
      run: |
        PROJECTS_TO_PACKAGE=""
        HAS_PACKAGES_TO_PUBLISH=false

        IFS=',' read -ra projects <<< "${{ steps.project-paths.outputs.projects }}"
        IFS=',' read -ra paths <<< "${{ steps.git-diff.outputs.pathsWithChanges }}"

        echo "These are the paths with changes: ${paths[@]}"
        echo "This is the picked publish mode: ${{ steps.validate-publish-type.outputs.mode }}"

        for project in "${projects[@]}"; do
          # ensure project does not start with ./
          project="${project#./}"
          echo "Checking if project $project has changes"

          # if the publishAllRegardlessChanges is true, package all projects regardless of changes
          if [ ${{ steps.validate-publish-type.outputs.mode }} == all ]; then
            echo "Packaging all projects regardless of changes"
            PROJECTS_TO_PACKAGE="$PROJECTS_TO_PACKAGE,$project"
            HAS_PACKAGES_TO_PUBLISH=true

          # if the publishAllWhenAnyHasChanges is true, package all projects when any of them has changes
          elif [ ${{ steps.validate-publish-type.outputs.mode }} == any ]; then
            echo "Packaging all projects when any of them has changes"
            PROJECTS_TO_PACKAGE="$PROJECTS_TO_PACKAGE,$project"
            HAS_PACKAGES_TO_PUBLISH=true

          # if the publishOnlyWithChanges is true, only package projects with changes
          elif [ ${{ steps.validate-publish-type.outputs.mode }} == changed ]; then
            echo "Packaging only projects with changes"
            
            # check if the project starts with one of the paths with changes
            for path in "${paths[@]}"; do
              echo "Checking if project $project starts with path $path"

              if [[ $project == *"$path"* ]]; then
                echo "Project $project has changes, adding it to the list of projects to package"
                PROJECTS_TO_PACKAGE="$PROJECTS_TO_PACKAGE,$project"
                HAS_PACKAGES_TO_PUBLISH=true
              fi
            done
          fi
        done
        PROJECTS_TO_PACKAGE=${PROJECTS_TO_PACKAGE:1}
        echo "Projects to package: $PROJECTS_TO_PACKAGE"
        echo "Has packages to publish: $HAS_PACKAGES_TO_PUBLISH"
        echo "projectsToPublish=$PROJECTS_TO_PACKAGE" >> $GITHUB_OUTPUT
        echo "hasPackagesToPublish=$HAS_PACKAGES_TO_PUBLISH" >> $GITHUB_OUTPUT

    - name: Restore and cache private nuget packages
      if: ${{ steps.load-projects-to-package.outputs.hasPackagesToPublish == 'true' }}
      uses: ./github-actions-publish-nuget/restore-dotnet
      with:
        dotnetVersion: ${{inputs.dotnetVersion}}
        packageReadonlyPat: ${{inputs.packageReadonlyPat}}

    - name: Bump version
      if: ${{ steps.load-projects-to-package.outputs.hasPackagesToPublish == 'true' }}
      id: bumpVersion
      uses: ./github-actions-publish-nuget/get-tag
      with:
        semverIncrementLevel: ${{ inputs.semverIncrementLevel }}
        preRelease: ${{ inputs.debuggable }}

    - name: Build
      if: ${{ steps.load-projects-to-package.outputs.hasPackagesToPublish == 'true' }}
      shell: bash
      run: |
        for f in $(find . -name "*.sln"); do echo "building solution $f" && \
          dotnet build $f \
            --configuration ${{steps.comp-mode.outputs.compilationMode}} \
            -p:Version=${{steps.bumpVersion.outputs.assemblyVersion}} \
            -p:SourceRevisionId=${{steps.bumpVersion.outputs.productVersion}} \
            --no-restore
        done

    - name: Package
      if: ${{ steps.load-projects-to-package.outputs.hasPackagesToPublish == 'true' }}
      shell: bash
      run: |
        IFS=',' read -ra projects <<< "${{ steps.load-projects-to-package.outputs.projectsToPublish }}"
        for project in "${projects[@]}"; do
          echo "packaging project $project"

          dotnet pack $project --no-build --configuration ${{ steps.comp-mode.outputs.compilationMode }} \
            --output ./nuget/ -p:PackageVersion=${{steps.bumpVersion.outputs.fullVersion}} --include-symbols --include-source
        done

    - name: Publish
      if: ${{ steps.load-projects-to-package.outputs.hasPackagesToPublish == 'true' }}
      shell: bash
      run: |
        ls ./nuget/*.nupkg
        for f in ./nuget/*.symbols.nupkg; \
          do echo "pushing $f file.." \
          && dotnet nuget push $f --api-key ${{inputs.githubToken}} --source "https://nuget.pkg.github.com/trakx/index.json";
        done

    - name: Push version tag
      if: ${{ steps.load-projects-to-package.outputs.hasPackagesToPublish == 'true' }}
      id: pushTag
      uses: ./github-actions-publish-nuget/push-tag
      with:
        tag: v${{steps.bumpVersion.outputs.fullVersion}}
        githubToken: ${{inputs.githubToken}}
        preRelease: ${{ inputs.debuggable }}